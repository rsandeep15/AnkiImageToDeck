from pathlib import Path
from openai import OpenAI
import sys

from AnkiSync import invoke

def createAudioFile(client, text, fileName):
    """
    Generates an audio file using text-to-speech synthesis.

    This function utilizes the OpenAI client to convert the given text
    into speech and saves it as an audio file. The speech is generated
    using the "gpt-4o-mini-tts" model with the voice "onyx", and is
    instructed to speak like a native speaker.

    Args:
        client: An instance of the OpenAI client used to call the API.
        text (str): The text to be converted into speech.
        fileName (str): The name of the output audio file.
    """

    with client.audio.speech.with_streaming_response.create(
        model="gpt-4o-mini-tts",
        voice="onyx",
        input=text,
        instructions="Speak like a native speaker for the passed in language. Ignore anything in parenthesis",
    ) as response:
        response.stream_to_file(Path(__file__).parent / fileName)


def main():
    """
    Given a deck name, this script adds audio to all cards in that deck.
    The audio is generated by ChatGPT text to speech, and is added as a sound file to the front of the card.
    The filename of the sound file is the card id.
    """
    deckname = sys.argv[1]
    cards = invoke("findNotes", query="deck:{deck_name}".format(deck_name=deckname))
    client = OpenAI()
    for cardID in cards:
        try:
            result = invoke("notesInfo", notes=[cardID])[0]
            frontText = result['fields']['Front']['value']
            backText = result['fields']['Back']['value']
            print("Adding audio for: " + frontText)
            filename = str(cardID)+".mp3"
            createAudioFile(client, frontText, filename)
            path_to_file = Path(__file__).parent.as_posix() + "/" + filename
            result = invoke("updateNoteFields", note={"id":cardID, "fields": {"Front":frontText, "Back":backText}, "audio": [{"filename":filename, "fields": ["Front"],"path":path_to_file}]})
        except Exception as e:
            print(e)
            continue
if __name__=="__main__":
    main()